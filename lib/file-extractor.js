// Generated by CoffeeScript 1.6.2
(function() {
  var FileExtractor, fs, path, unorm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  unorm = require('unorm');

  FileExtractor = (function() {
    function FileExtractor() {
      this.readFile = __bind(this.readFile, this);
      this.readDirectory = __bind(this.readDirectory, this);
      this.extract = __bind(this.extract, this);
    }

    FileExtractor.prototype.directory = null;

    FileExtractor.prototype.extract_types = null;

    FileExtractor.prototype.extract = function(callback) {
      var type, types, _i, _len, _ref;

      if (this.extract_types != null) {
        types = [];
        _ref = this.extract_types;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          types.push(type.toLowerCase());
        }
        this.extract_types = types;
      }
      this.top = this.directory;
      this.files = [];
      this.readDirectory(this.directory);
      return typeof callback === "function" ? callback(this.files) : void 0;
    };

    FileExtractor.prototype.readDirectory = function(directory) {
      var item, itemname, list, stat, _i, _len, _results;

      list = fs.readdirSync(directory);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        itemname = list[_i];
        item = path.resolve(directory, itemname);
        stat = fs.statSync(item);
        if (stat.isDirectory()) {
          _results.push(this.readDirectory(item));
        } else if (stat.isFile()) {
          _results.push(this.readFile(item));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FileExtractor.prototype.readFile = function(file) {
      var extension;

      extension = path.extname(file).toLowerCase();
      if ((this.extract_types == null) || this.extract_types.indexOf(extension) > -1) {
        return this.files.push({
          path: unorm.nfc(file).replace(/\\/g, '/'),
          relative_path: unorm.nfc(path.relative(this.top, file)).replace(/\\/g, '/'),
          base: unorm.nfc(path.dirname(file)).replace(/\\/g, '/'),
          relative_base: unorm.nfc(path.relative(this.top, path.dirname(file))).replace(/\\/g, '/'),
          name: unorm.nfc(path.basename(file, extension)),
          extension: extension
        });
      }
    };

    return FileExtractor;

  })();

  exports.extract = function() {
    var args, callback, directory, extract_types, extractor;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    directory = args[0];
    if (args.length === 3) {
      extract_types = args[1];
      callback = args[2];
    } else {
      callback = args[1];
    }
    extractor = new FileExtractor;
    extractor.directory = directory;
    extractor.extract_types = extract_types;
    return extractor.extract(callback);
  };

  exports.treefy = function(files, json) {
    var current, dir, dirs, f, file, _i, _j, _len, _ref;

    if (json == null) {
      json = {};
    }
    for (f = _i = 0, _ref = files.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; f = 0 <= _ref ? ++_i : --_i) {
      file = files[f];
      dirs = file.relative_base.split('/');
      current = json;
      if (file.relative_base !== '') {
        for (_j = 0, _len = dirs.length; _j < _len; _j++) {
          dir = dirs[_j];
          if (current[dir] == null) {
            current[dir] = {};
          }
          current = current[dir];
        }
      }
      current[file.name] = f;
    }
    return json;
  };

  exports.FileExtractor = FileExtractor;

}).call(this);

/*
//@ sourceMappingURL=file-extractor.map
*/
