// Generated by CoffeeScript 1.4.0
(function() {
  var DirectoryReader, FileExtractor, fs, path, unorm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  unorm = require('unorm');

  /*
  catch all files of match types in some directory and children directories
  
  [
  	{base : '/xxx/bbb/ccc', name : 'filename', extension : '.extension'},...
  ]
  */


  FileExtractor = (function() {

    function FileExtractor(types) {
      this.readFile = __bind(this.readFile, this);

      this.readDirectory = __bind(this.readDirectory, this);

      this.extract = __bind(this.extract, this);

      var type, _i, _len;
      this.extract_types = [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        this.extract_types.push(type.toLowerCase());
      }
    }

    FileExtractor.prototype.extract = function(directory) {
      this.top = directory;
      this.files = [];
      this.readDirectory(directory);
      return this.files;
    };

    FileExtractor.prototype.readDirectory = function(directory) {
      var item, itemname, list, stat, _i, _len, _results;
      list = fs.readdirSync(directory);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        itemname = list[_i];
        item = path.resolve(directory, itemname);
        stat = fs.statSync(item);
        if (stat.isDirectory()) {
          _results.push(this.readDirectory(item));
        } else if (stat.isFile()) {
          _results.push(this.readFile(item));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FileExtractor.prototype.readFile = function(file) {
      var extension, ufile;
      extension = path.extname(file).toLowerCase();
      ufile = unorm.nfc(file);
      if (!(this.extract_types != null) || this.extract_types.indexOf(extension) > -1) {
        return this.files.push({
          path: ufile,
          relative_path: unorm.nfc(path.relative(this.top, file)),
          base: path.dirname(ufile),
          relative_base: unorm.nfc(path.relative(this.top, path.dirname(file))),
          name: unorm.nfc(path.basename(file, extension)),
          extension: extension
        });
      }
    };

    return FileExtractor;

  })();

  /*
  {
  	__INFO__ : { path : "absolute path" }
  	__FILES__ : [ {base : '/xxx/bbb/ccc', name : 'filename', extension : '.extension'}, ... ]
  	subdirectory1 : {
  		__INFO__: {}
  		__FILES__ : []
  		subdirectory : {}
  	},
  	subdirectory2 : {
  		
  	}
  }
  */


  DirectoryReader = (function() {

    function DirectoryReader(extract_types) {
      this.extract_types = extract_types;
      this.toJson = __bind(this.toJson, this);

    }

    DirectoryReader.prototype.toJson = function(directory) {
      var current, currentPath, dir, dirs, extractor, file, files, json, _i, _j, _len, _len1, _ref;
      this.top = directory;
      extractor = new FileExtractor(this.extract_types);
      files = extractor.extract(directory);
      json = {
        __INFO__: {
          path: directory,
          relative_path: '/'
        }
      };
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        dirs = path.relative(directory, file.path).split(path.sep);
        current = json;
        currentPath = directory;
        dirs.pop();
        for (_j = 0, _len1 = dirs.length; _j < _len1; _j++) {
          dir = dirs[_j];
          if (!(current[dir] != null)) {
            current[dir] = {
              __INFO__: {
                path: path.join(currentPath, dir),
                relative_path: path.relative(this.top, path.join(currentPath, dir))
              }
            };
          }
          current = current[dir];
          currentPath = path.join(currentPath, dir);
        }
        if ((_ref = current.__FILES__) == null) {
          current.__FILES__ = [];
        }
        current.__FILES__.push(file);
      }
      return json;
    };

    return DirectoryReader;

  })();

  exports.FileExtractor = FileExtractor;

  exports.DirectoryReader = DirectoryReader;

}).call(this);
